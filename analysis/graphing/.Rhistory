cluster_assignments, data_resample, k)
# update progress bar
pb$tick()
}
return(boot_stats)
}
# run kmeans many times on subsets of the data to find concensus clustering
kmeans_permute <- function(data, k, num_iter) {
permute_stats <- matrix(nrow = num_iter, ncol = 6)
# initialize progress bar
pb <- progress_bar$new(format = "Time: :elapsedfull [:bar] Iteration :current/:total (:percent)", total = num_iter)
# perform kmeans for each permutation
for (i in seq_len(num_iter)) {
# shuffle rows (row of data now pairs with different row name)
permute_idx <- sample(nrow(data), nrow(data),
replace = FALSE)
data_permute <- data[permute_idx, ]
rownames(data_permute) <- rownames(data)
# run kmeans
kmeans_result <- kmeans(data_permute, centers = k)
cluster_assignments <- kmeans_result$cluster
# calculate category, pair-wise clustering probabilities
permute_stats[i, ] <- get_pair_wise_clustering_probs(cluster_assignments,
data_permute, k)
# update progress bar
pb$tick()
}
return(permute_stats)
}
# applies a kruskal-walis test to find differential expressed column values
get_diff_repres_ec <- function(data) {
kruskal_res <- matrix(nrow = ncol(data), ncol = 1)
rownames(kruskal_res) <- colnames(data)
# create vector of groups for kruskal wallis test
groups <- vector(length = nrow(data))
samples <- rownames(data)
for (i in seq_len(length(samples))) {
if (grepl("ind", samples[i], fixed = TRUE)) {
groups[i] = 1
} else if (grepl("pre", samples[i], fixed = TRUE)) {
groups[i] = 2
} else if (grepl("pal", samples[i], fixed = TRUE)) {
groups[i] = 3
} else {
stop(paste0("invalid group at sample ", i))
}
}
for (i in seq_len(ncol(data))) {
kruskal_res[i, 1] <- kruskal.test(data[, i], groups)[[3]]
}
# apply benjamini hochberg correction to p-values
kruskal_res[, 1] <- p.adjust(kruskal_res[, 1], method = "BH",
n = length(kruskal_res[, 1]))
# order p-values from lowest to highest
ordered_res <- kruskal_res
ordered_res[, 1] <- kruskal_res[order(kruskal_res[, 1]), ]
rownames(ordered_res) <- rownames(kruskal_res)[order(kruskal_res[, 1])]
return(ordered_res)
}
dir = "~/Documents/Research/project_coprolite_viromes/analysis/"
knitr::opts_chunk$set(root.dir = dir)
base_dir <- "~/Documents/Research/project_coprolite_viromes/analysis/"
# function to source R files from a specified directory
source_files_from_dir <- function(directory) {
full_path <- file.path(base_dir, directory)
functions_list <- list.files(
path = full_path,
pattern = "*.R",
full.names = TRUE
)
sapply(functions_list, source)
}
# source functions from different directories
source_files_from_dir("stats")
source_files_from_dir("graphing")
source_files_from_dir("misc")
set.seed(seed = 123)
k <- 4
max_iter <- 1000
subset_top <- 100
color_range <- 10
star_bounds <- list(list(0.1, 0.9), list(0.025, 0.975), list(0.01, 0.99),
list(0.001, 0.999))
data <- "~/Documents/Research/project_coprolite_viromes_NOT_CODE/data"
vir_phage_ec_prop_data <- paste0(data, "/vir_phage_ec_counts.csv")
lifestyle_counts_data <- paste0(data, "/lifestyle_counts.csv")
cazy_prop_data <- paste0(data, "/cazy_alignment_counts.csv")
cazy_contig_hits_data <- paste0(data, "/cazy_alignment_contig_hits.csv")
vf_prop_data <- paste0(data, "/vf_alignment_counts.csv")
vf_contig_hits_data <- paste0(data, "/vf_alignment_contig_hits.csv")
vf_reference <- paste0(data, "/VFs.csv")
figures <- "~/Documents/Research/project_coprolite_viromes_NOT_CODE/figures"
violin_dir <- paste0(figures, "/violin")
heat_dir <- paste0(figures, "/heat")
jitter_dir <- paste0(figures, "/jitter")
voilin_vir_ec <- paste0("clustering_vir_ec_", k)
voilin_lifestyle <- "lifestyle"
voilin_vf_aln <- "vf_aln"
voilin_cazy_aln <- "cazy_aln"
voilin_phage_ec <- paste0("clustering_phage_ec_", k)
voilin_phage_fam <- paste0("clustering_phage_fam_", k)
voilin_phage_host <- paste0("clustering_phage_host_", k)
heat_vir_ec <- paste0("diff_repres_vir_ec_", subset_top)
heat_vir_ec_no_key <- paste0("diff_repres_vir_ec_no_key", subset_top)
heat_phage_ec <- paste0("diff_repres_phage_ec_", subset_top)
heat_phage_fam <- paste0("diff_repres_phage_fam_", subset_top)
heat_phage_host <- paste0("diff_repres_phage_host_", subset_top)
jitter_vir_classes <- paste0("vir_classes_", subset_top)
jitter_phage_classes <- paste0("phage_classes_", subset_top)
# read in lifestyle counts
lifestyle_counts <- read.csv(
file = lifestyle_counts_data,
header = TRUE,
row.names = 1
)
# bootstrap median ratio of temperate-to-lytic viruses
lifestyle_boot_res <- get_median_ratios(
data = lifestyle_counts,
num_iter = max_iter,
numer = 1,
denom = 2
)
# plot violin plot of lifestyles by category
lifestyle_voilin <- create_cat_voilins(
data = lifestyle_boot_res,
file_name = voilin_lifestyle,
plot_dir = violin_dir)
lifestyle_voilin
# print stats testing of lifestyles preferences between categories
lifestyle <- melt(lifestyle_boot_res)
kruskal.test(lifestyle$value, lifestyle$Var2)
View(lifestyle_counts)
# read in cazy counts data
cazy_counts <- read.csv(
file = cazy_prop_data,
header = TRUE,
row.names = 1
)
# read in cazy counts data
cazy_contig_hits <- read.csv(
file = cazy_contig_hits_data,
header = TRUE,
row.names = 1)
# boostrap median ratio of cazy coverage-to-total contig lengths
cazy_aln_boot_res <- get_median_ratios(
data = cazy_contig_hits,
num_iter = max_iter,
numer = 2,
denom = 1)
View(cazy_contig_hits)
View(cazy_aln_voilin)
# plot violin plot of coverage by category
cazy_aln_voilin <- create_cat_voilins(
data = cazy_aln_boot_res,
file_name = voilin_cazy_aln,
plot_dir = violin_dir)
cazy_aln_voilin
# print stats testing of coverage between categories
cazy_aln <- melt(cazy_aln_boot_res)
kruskal.test(cazy_aln$value, cazy_aln$Var2)
# read vf reference
vf_to_vfc <- read.csv(
file = vf_reference,
header = TRUE)
# format vf reference
colnames(vf_to_vfc) <- vf_to_vfc[1, ]
vf_to_vfc <- vf_to_vfc[-1, c("VFID", "VFCID")]
# read in vf counts data
vf_counts <- read.csv(
file = vf_prop_data,
header = TRUE,
row.names = 1
)
# read in vf counts data
vf_contig_hits <- read.csv(
file = vf_contig_hits_data,
header = TRUE,
row.names = 1)
# bootstrap median ratio of vf coverage to total contig lengths
vf_aln_boot_res <- get_median_ratios(
data = vf_contig_hits,
num_iter = max_iter,
numer = 2,
denom = 1
)
View(vf_aln_voilin)
View(vf_aln_boot_res)
# plot violin plot of coverage by category
vf_aln_voilin <- create_cat_voilins(
data = vf_aln_boot_res,
file_name = voilin_vf_aln,
plot_dir = violin_dir)
vf_aln_voilin
# print stats testing of coverage between categories
vf_aln <- melt(vf_aln_boot_res)
kruskal.test(vf_aln$value, vf_aln$Var2)
View(cazy_counts)
View(vf_contig_hits)
View(vf_counts)
View(vf_to_vfc)
format_vf_counts <- function(data, vf_ref) {
data[, "cat"] <- NA
profiles <- rownames(data)
# identify which category each profile belongs to
for (i in seq_len(nrow(data))) {
cat <- data[data["VFID", ] == profiles[i], "VFCID"]
data[i, "cat"] == cat
}
# combine each profile's counts
profiles_present <- unique(data[, "cat"])
combined_data <- matrix(nrow = length(profiles_present), ncol = ncol(data))
colnames(combined_data) <- colnames(data)
rownames(combined_data) <- profiles_present
for (i in seq_len(profiles_present)) {
profile_subset <- data[, data[, "cat"] == profiles_present[i]]
profile_subset <- profile_subset[, -"cat"]
profile_sums <- colSums(profile_subset)
combined_data[profiles_present[i], ] <- profile_sums
}
return(combined_data)
}
debugSource("~/Documents/Research/project_coprolite_viromes/analysis/misc/format_vf_counts.R", echo=TRUE)
format_vf_counts <- function(data, vf_ref) {
data[, "cat"] <- NA
profiles <- rownames(data)
# identify which category each profile belongs to
for (i in seq_len(nrow(data))) {
cat <- data[data["VFID", ] == profiles[i], "VFCID"]
data[i, "cat"] == cat
}
# combine each profile's counts
profiles_present <- unique(data[, "cat"])
combined_data <- matrix(nrow = length(profiles_present), ncol = ncol(data))
colnames(combined_data) <- colnames(data)
rownames(combined_data) <- profiles_present
for (i in seq_len(profiles_present)) {
profile_subset <- data[, data[, "cat"] == profiles_present[i]]
profile_subset <- profile_subset[, -"cat"]
profile_sums <- colSums(profile_subset)
combined_data[profiles_present[i], ] <- profile_sums
}
return(combined_data)
}
debugSource("~/Documents/Research/project_coprolite_viromes/analysis/misc/format_vf_counts.R", echo=TRUE)
# read vf reference
vf_to_vfc <- read.csv(
file = vf_reference,
header = TRUE)
# format vf reference
colnames(vf_to_vfc) <- vf_to_vfc[1, ]
vf_to_vfc <- vf_to_vfc[-1, c("VFID", "VFCID")]
# read in vf counts data
vf_counts <- read.csv(
file = vf_prop_data,
header = TRUE,
row.names = 1
)
# format vf counts
vfc_counts <- format_vf_counts(
data = vf_counts,
vf_ref = vf_to_vfc
)
View(data)
force(vf_ref)
View(vf_ref)
profiles[i]
data["VFID", ] == profiles[i]
debugSource("~/Documents/Research/project_coprolite_viromes/analysis/misc/format_vf_counts.R", echo=TRUE)
# format vf counts
vfc_counts <- format_vf_counts(
data = vf_counts,
vf_ref = vf_to_vfc
)
vf_ref["VFID", ] == profiles[i]
debugSource("~/Documents/Research/project_coprolite_viromes/analysis/misc/format_vf_counts.R", echo=TRUE)
# format vf counts
vfc_counts <- format_vf_counts(
data = vf_counts,
vf_ref = vf_to_vfc
)
vf_ref[, "VFID"]
vf_ref[, "VFID"] == profiles[i]
table(vf_ref[, "VFID"] == profiles[i])
vf_ref[vf_ref[, "VFID"] == profiles[i], "VFCID"]
cat
print(cat)
data[1, "cat"]
debugSource("~/Documents/Research/project_coprolite_viromes/analysis/misc/format_vf_counts.R", echo=TRUE)
debugSource("~/Documents/Research/project_coprolite_viromes/analysis/misc/format_vf_counts.R", echo=TRUE)
# format vf counts
vfc_counts <- format_vf_counts(
data = vf_counts,
vf_ref = vf_to_vfc
)
cat <- vf_ref[vf_ref[, "VFID"] == profiles[i], "VFCID"]
data[1, "cat"]
vf_ref[vf_ref[, "VFID"] == profiles[i], "VFCID"]
data[2, "cat"]
debugSource("~/Documents/Research/project_coprolite_viromes/analysis/misc/format_vf_counts.R", echo=TRUE)
# format vf counts
vfc_counts <- format_vf_counts(
data = vf_counts,
vf_ref = vf_to_vfc
)
debugSource("~/Documents/Research/project_coprolite_viromes/analysis/misc/format_vf_counts.R", echo=TRUE)
# format vf counts
vfc_counts <- format_vf_counts(
data = vf_counts,
vf_ref = vf_to_vfc
)
debugSource("~/Documents/Research/project_coprolite_viromes/analysis/misc/format_vf_counts.R", echo=TRUE)
# format vf counts
vfc_counts <- format_vf_counts(
data = vf_counts,
vf_ref = vf_to_vfc
)
source("~/Documents/Research/project_coprolite_viromes/analysis/misc/format_vf_counts.R", echo=TRUE)
debugSource("~/Documents/Research/project_coprolite_viromes/analysis/misc/format_vf_counts.R", echo=TRUE)
# format vf counts
vfc_counts <- format_vf_counts(
data = vf_counts,
vf_ref = vf_to_vfc
)
debugSource("~/Documents/Research/project_coprolite_viromes/analysis/misc/format_vf_counts.R", echo=TRUE)
# format vf counts
vfc_counts <- format_vf_counts(
data = vf_counts,
vf_ref = vf_to_vfc
)
debugSource("~/Documents/Research/project_coprolite_viromes/analysis/misc/format_vf_counts.R", echo=TRUE)
# format vf counts
vfc_counts <- format_vf_counts(
data = vf_counts,
vf_ref = vf_to_vfc
)
debugSource("~/Documents/Research/project_coprolite_viromes/analysis/misc/format_vf_counts.R", echo=TRUE)
# format vf counts
vfc_counts <- format_vf_counts(
data = vf_counts,
vf_ref = vf_to_vfc
)
debugSource("~/Documents/Research/project_coprolite_viromes/analysis/misc/format_vf_counts.R", echo=TRUE)
debugSource("~/Documents/Research/project_coprolite_viromes/analysis/misc/format_vf_counts.R", echo=TRUE)
# format vf counts
vfc_counts <- format_vf_counts(
data = vf_counts,
vf_ref = vf_to_vfc
)
# format vf counts
vfc_counts <- format_vf_counts(
data = vf_counts,
vf_ref = vf_to_vfc
)
source("~/Documents/Research/project_coprolite_viromes/analysis/misc/format_vf_counts.R", echo=TRUE)
format_vf_counts <- function(data, vf_ref) {
data[, "cat"] <- NA
profiles <- rownames(data)
# identify which category each profile belongs to
for (i in seq_len(nrow(data))) {
cat <- vf_ref[vf_ref[, "VFID"] == profiles[i], "VFCID"]
data[i, "cat"] <- cat
print(i)
}
# combine each profile's counts
profiles_present <- unique(data[, "cat"])
combined_data <- matrix(nrow = length(profiles_present), ncol = ncol(data))
colnames(combined_data) <- colnames(data)
rownames(combined_data) <- profiles_present
for (i in seq_len(profiles_present)) {
profile_subset <- data[, data[, "cat"] == profiles_present[i]]
profile_subset <- profile_subset[, -"cat"]
profile_sums <- colSums(profile_subset)
combined_data[profiles_present[i], ] <- profile_sums
}
return(combined_data)
}
# format vf counts
vfc_counts <- format_vf_counts(
data = vf_counts,
vf_ref = vf_to_vfc
)
debugSource("~/Documents/Research/project_coprolite_viromes/analysis/misc/format_vf_counts.R", echo=TRUE)
# format vf counts
vfc_counts <- format_vf_counts(
data = vf_counts,
vf_ref = vf_to_vfc
)
profiles[i]
vf_ref[, "VFID"] == profiles[i]
table(vf_ref[, "VFID"] == profiles[i])
data[profiles[i], ]
profiles[i]
data["VF1355", ]
View(data["VF1355", ])
source("~/Documents/Research/project_coprolite_viromes/analysis/misc/format_vf_counts.R", echo=TRUE)
View(cazy_counts)
setwd("Documents/Research/project_coprolite_viromes/analysis/graphing/")
dir = "~/Documents/Research/project_coprolite_viromes/analysis/"
knitr::opts_chunk$set(root.dir = dir)
base_dir <- "~/Documents/Research/project_coprolite_viromes/analysis/"
# function to source R files from a specified directory
source_files_from_dir <- function(directory) {
full_path <- file.path(base_dir, directory)
functions_list <- list.files(
path = full_path,
pattern = "*.R",
full.names = TRUE
)
sapply(functions_list, source)
}
# source functions from different directories
source_files_from_dir("stats")
source_files_from_dir("graphing")
source_files_from_dir("misc")
set.seed(seed = 123)
k <- 4
max_iter <- 1000
subset_top <- 100
color_range <- 10
star_bounds <- list(list(0.1, 0.9), list(0.025, 0.975), list(0.01, 0.99),
list(0.001, 0.999))
data <- "~/Documents/Research/project_coprolite_viromes_NOT_CODE/data"
vir_phage_ec_prop_data <- paste0(data, "/vir_phage_ec_counts.csv")
lifestyle_counts_data <- paste0(data, "/lifestyle_counts.csv")
cazy_prop_data <- paste0(data, "/cazy_alignment_counts.csv")
cazy_contig_hits_data <- paste0(data, "/cazy_alignment_contig_hits.csv")
vf_prop_data <- paste0(data, "/vf_alignment_counts.csv")
vf_contig_hits_data <- paste0(data, "/vf_alignment_contig_hits.csv")
vf_reference <- paste0(data, "/VFs.csv")
figures <- "~/Documents/Research/project_coprolite_viromes_NOT_CODE/figures"
violin_dir <- paste0(figures, "/violin")
heat_dir <- paste0(figures, "/heat")
jitter_dir <- paste0(figures, "/jitter")
voilin_vir_ec <- paste0("clustering_vir_ec_", k)
voilin_lifestyle <- "lifestyle"
voilin_vf_aln <- "vf_aln"
voilin_cazy_aln <- "cazy_aln"
voilin_phage_ec <- paste0("clustering_phage_ec_", k)
voilin_phage_fam <- paste0("clustering_phage_fam_", k)
voilin_phage_host <- paste0("clustering_phage_host_", k)
heat_vir_ec <- paste0("diff_repres_vir_ec_", subset_top)
heat_vir_ec_no_key <- paste0("diff_repres_vir_ec_no_key", subset_top)
heat_phage_ec <- paste0("diff_repres_phage_ec_", subset_top)
heat_phage_fam <- paste0("diff_repres_phage_fam_", subset_top)
heat_phage_host <- paste0("diff_repres_phage_host_", subset_top)
jitter_vir_classes <- paste0("vir_classes_", subset_top)
jitter_phage_classes <- paste0("phage_classes_", subset_top)
# read in lifestyle counts
lifestyle_counts <- read.csv(
file = lifestyle_counts_data,
header = TRUE,
row.names = 1
)
# bootstrap median ratio of temperate-to-lytic viruses
lifestyle_boot_res <- get_median_ratios(
data = lifestyle_counts,
num_iter = max_iter,
numer = 1,
denom = 2
)
# plot violin plot of lifestyles by category
lifestyle_voilin <- create_cat_voilins(
data = lifestyle_boot_res,
file_name = voilin_lifestyle,
plot_dir = violin_dir)
lifestyle_voilin
# print stats testing of lifestyles preferences between categories
lifestyle <- melt(lifestyle_boot_res)
kruskal.test(lifestyle$value, lifestyle$Var2)
# read in cazy counts data
cazy_contig_hits <- read.csv(
file = cazy_contig_hits_data,
header = TRUE,
row.names = 1)
# bootstrap median ratio of cazy coverage-to-total contig lengths
cazy_aln_boot_res <- get_median_ratios(
data = cazy_contig_hits,
num_iter = max_iter,
numer = 2,
denom = 1)
# plot violin plot of coverage by category
cazy_aln_voilin <- create_cat_voilins(
data = cazy_aln_boot_res,
file_name = voilin_cazy_aln,
plot_dir = violin_dir)
cazy_aln_voilin
# print stats testing of coverage between categories
cazy_aln <- melt(cazy_aln_boot_res)
kruskal.test(cazy_aln$value, cazy_aln$Var2)
# read in vf counts data
vf_contig_hits <- read.csv(
file = vf_contig_hits_data,
header = TRUE,
row.names = 1)
# bootstrap median ratio of vf coverage to total contig lengths
vf_aln_boot_res <- get_median_ratios(
data = vf_contig_hits,
num_iter = max_iter,
numer = 2,
denom = 1
)
# plot violin plot of coverage by category
vf_aln_voilin <- create_cat_voilins(
data = vf_aln_boot_res,
file_name = voilin_vf_aln,
plot_dir = violin_dir)
vf_aln_voilin
# print stats testing of coverage between categories
vf_aln <- melt(vf_aln_boot_res)
kruskal.test(vf_aln$value, vf_aln$Var2)
View(vf_contig_hits)
View(vf_aln_boot_res)
