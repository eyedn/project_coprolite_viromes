weights <- c(weights, 2)
} else if (grepl("ind", groups[i])) {
weights <- c(weights, 1)
} else {
weights <- c(weights, 0)
}
}
reordered_dend <- reorder(dend, wts = weights, agglo.FUN = mean)
hc_2 <- hclust(dist(t(sig_data_concat)))
dend_raw_2 <- as.dendrogram(hc_2)
dend_2 <- set(dend_raw_2, "branches_lwd", dend_width)
# define column colors and labels
group_col_set <- rev(brewer.pal(9, "Greys")[c(3,5,8)])
group_col <- c()
col_labels <- c()
for (i in seq_len(length(groups))) {
if (grepl("pal", groups[i])) {
group_col <- c(group_col, group_col_set[1])
} else if (grepl("pre", groups[i])) {
group_col <- c(group_col, group_col_set[2])
} else {
group_col <- c(group_col, group_col_set[3])
}
col_labels <- c(col_labels, origin_labels[[groups[i]]])
}
# define row colors and labels
row_col_range <- c(brewer.pal(9, "Reds")[-c(1,9)],
brewer.pal(9, "Purples")[-c(1,9)])
rows <- colnames(sig_data_concat)
row_col <- c()
rownames(vf_reference) = vf_reference[, "VFID"]
for (i in seq_len(length(rows))) {
row_col <- c(row_col, row_col_range[vf_reference[rows[i], "color"]])
}
# save plot to svg file
file_name <- append_time_to_filename(file_name)
svglite(filename = paste0(plot_dir, "/", file_name, ".svg"),
width = 35,
height = 45)
heatmap.2(t(sig_data_concat),
trace = "none",
Colv = reordered_dend,
Rowv = dend_2,
col = rev(brewer.pal(11, "RdBu")),
srtCol = 325,
adjCol = c(0, 1),
ColSideColors = group_col,
RowSideColors = row_col,
labCol = col_labels,
margins = c(25, 20),
cexRow = 3,
cexCol = 3.5,
lhei = c(0.8, 3),
lwid = c(0.8, 3),
key = TRUE,
key.xlab = "scaled log(CPM + 1)",
key.title = "Median Representation",
keysize = 2,
key.par = list(cex = 3),
density.info = "none"
)
}
# get differential represented genes
vf_diff_repres <- get_diff_repres_ec(data = vf_t_mat)
# generate heatmap of most differential represented genes
create_vf_heatmap(
data = vf_t_mat,
signif_res = vf_diff_repres,
subset = subset_top,
vf_reference = vf_reference,
file_name = heat_vf,
plot_dir = heat_dir
)
# generate a heatmap based on differential expression
create_vf_heatmap <- function(data, signif_res, subset, vf_reference,
file_name, plot_dir) {
sig_data <- data[, rownames(signif_res)[1:subset]]
sig_data_concat <- matrix(ncol = ncol(sig_data), nrow = length(cat_labels))
colnames(sig_data_concat) <- colnames(sig_data)
rownames(sig_data_concat) <- cat_labels
# combine all data from same category by taking median
for (i in seq_len(length(cat_labels))) {
cat_subset <- sig_data[grep(cat_labels[i], rownames(sig_data)), ]
if (is.matrix(cat_subset)) {
cat_stats <- apply(cat_subset, 2, median)
} else {
cat_stats <- as.vector(cat_subset)
}
sig_data_concat[cat_labels[i], ] <- cat_stats
}
# define dendrogram order
dend_width <- 15
hc <- hclust(dist(sig_data_concat))
dend_raw <- as.dendrogram(hc)
dend <- set(dend_raw, "branches_lwd", dend_width)
weights <- c()
groups <- rownames(sig_data_concat)
for (i in seq_len(length(groups))) {
if (grepl("pal", groups[i])) {
weights <- c(weights, 3)
} else if (grepl("pre", groups[i])) {
weights <- c(weights, 2)
} else if (grepl("ind", groups[i])) {
weights <- c(weights, 1)
} else {
weights <- c(weights, 0)
}
}
reordered_dend <- reorder(dend, wts = weights, agglo.FUN = mean)
hc_2 <- hclust(dist(t(sig_data_concat)))
dend_raw_2 <- as.dendrogram(hc_2)
dend_2 <- set(dend_raw_2, "branches_lwd", dend_width)
# define column colors and labels
group_col_set <- rev(brewer.pal(9, "Greys")[c(3,5,8)])
group_col <- c()
col_labels <- c()
for (i in seq_len(length(groups))) {
if (grepl("pal", groups[i])) {
group_col <- c(group_col, group_col_set[1])
} else if (grepl("pre", groups[i])) {
group_col <- c(group_col, group_col_set[2])
} else {
group_col <- c(group_col, group_col_set[3])
}
col_labels <- c(col_labels, origin_labels[[groups[i]]])
}
# define row colors and labels
row_col_range <- c(brewer.pal(9, "PuRd"),
brewer.pal(9, "Purples")[c(5,6,7)],
brewer.pal(9, "Reds")[c(2,3)])
rows <- colnames(sig_data_concat)
row_col <- c()
rownames(vf_reference) = vf_reference[, "VFID"]
for (i in seq_len(length(rows))) {
row_col <- c(row_col, row_col_range[vf_reference[rows[i], "color"]])
}
# save plot to svg file
file_name <- append_time_to_filename(file_name)
svglite(filename = paste0(plot_dir, "/", file_name, ".svg"),
width = 35,
height = 45)
heatmap.2(t(sig_data_concat),
trace = "none",
Colv = reordered_dend,
Rowv = dend_2,
col = rev(brewer.pal(11, "RdBu")),
srtCol = 325,
adjCol = c(0, 1),
ColSideColors = group_col,
RowSideColors = row_col,
labCol = col_labels,
margins = c(25, 20),
cexRow = 3,
cexCol = 3.5,
lhei = c(0.8, 3),
lwid = c(0.8, 3),
key = TRUE,
key.xlab = "scaled log(CPM + 1)",
key.title = "Median Representation",
keysize = 2,
key.par = list(cex = 3),
density.info = "none"
)
}
# get differential represented genes
vf_diff_repres <- get_diff_repres_ec(data = vf_t_mat)
# generate heatmap of most differential represented genes
create_vf_heatmap(
data = vf_t_mat,
signif_res = vf_diff_repres,
subset = subset_top,
vf_reference = vf_reference,
file_name = heat_vf,
plot_dir = heat_dir
)
dir = "~/Documents/Research/project_coprolite_viromes/analysis/"
knitr::opts_chunk$set(root.dir = dir)
base_dir <- "~/Documents/Research/project_coprolite_viromes/analysis/"
# function to source R files from a specified directory
source_files_from_dir <- function(directory) {
full_path <- file.path(base_dir, directory)
functions_list <- list.files(
path = full_path,
pattern = "*.R",
full.names = TRUE
)
sapply(functions_list, source)
}
# source functions from different directories
source_files_from_dir("stats")
source_files_from_dir("graphing")
source_files_from_dir("misc")
set.seed(seed = 123)
k <- 4
max_iter <- 1000
subset_top <- 100
star_bounds <- list(list(0.1, 0.9), list(0.025, 0.975), list(0.01, 0.99),
list(0.001, 0.999))
data <- "~/Documents/Research/project_coprolite_viromes_NOT_CODE/data"
vir_phage_ec_prop_data <- paste0(data, "/vir_phage_ec_counts.csv")
phage_ec_prop_data <- paste0(data, "/phage_ec_counts.csv")
vir_on_phage_ec_prop_data <- paste0(data, "/vir_on_phage_ec_counts.csv")
bac_on_phage_ec_prop_data <- paste0(data, "/bac_on_phage_ec_counts.csv")
lifestyle_counts_data <- paste0(data, "/lifestyle_counts.csv")
cazy_prop_data <- paste0(data, "/cazy_alignment_counts.csv")
cazy_contig_hits_data <- paste0(data, "/cazy_alignment_contig_hits.csv")
vf_prop_data <- paste0(data, "/vf_alignment_counts.csv")
vf_contig_hits_data <- paste0(data, "/vf_alignment_contig_hits.csv")
vf_reference <- paste0(data, "/VFs.csv")
figures <- "~/Documents/Research/project_coprolite_viromes_NOT_CODE/figures"
violin_dir <- paste0(figures, "/violin")
heat_dir <- paste0(figures, "/heat")
jitter_dir <- paste0(figures, "/jitter")
voilin_vir_ec <- paste0("clustering_vir_ec_", k)
voilin_lifestyle <- "lifestyle"
voilin_vf_aln <- "vf_aln"
voilin_cazy_aln <- "cazy_aln"
voilin_phage_ec <- paste0("clustering_phage_ec_", k)
voilin_phage_fam <- paste0("clustering_phage_fam_", k)
voilin_phage_host <- paste0("clustering_phage_host_", k)
heat_vir_ec <- paste0("diff_repres_vir_ec_", subset_top)
heat_vir_ec_no_key <- paste0("diff_repres_vir_ec_no_key", subset_top)
heat_phage_ec <- paste0("diff_repres_phage_ec_", subset_top)
heat_phage_fam <- paste0("diff_repres_phage_fam_", subset_top)
heat_phage_host <- paste0("diff_repres_phage_host_", subset_top)
heat_cazy <- "diff_repress_cazy_profiles"
heat_vf <- "diff_repress_vf_profiles"
jitter_vir_classes <- paste0("vir_classes_", subset_top)
jitter_phage_classes <- paste0("phage_classes_", subset_top)
# read in raw counts data
vir_ec_counts <- read.csv(
file = vir_phage_ec_prop_data,
header = TRUE,
row.names = 1
)
# normalize observations within a sample and transform to log( CPM + 1 )
vir_ec_norm <- normalize_data(df = vir_ec_counts)
vir_ec_t_mat <- scale(t(vir_ec_norm))
# find optimal number of clusters with a wss plot
vir_ec_optimal_wss <- get_optimal_clusters(
data = vir_ec_t_mat,
method = "wss"
)
vir_ec_optimal_wss
# perform kmeans with bootstrap resampling
vir_ec_boot_res <- kmeans_bootstrap(
data = vir_ec_t_mat,
k = k,
num_iter = max_iter
)
# perform kmeans with permutations
vir_ec_perm_res <- kmeans_permute(
data = vir_ec_t_mat,
k = k,
num_iter = max_iter
)
# combining bootstrap and permutation results
vir_ec_clus_res <- get_clustering_res(
boot_data = vir_ec_boot_res,
perm_data = vir_ec_perm_res,
star_bounds = star_bounds,
num_iter = max_iter
)
# plot clustering results
vir_ec_clus_violin <- create_clus_violin(
boot_data = vir_ec_boot_res,
clus_res = vir_ec_clus_res,
file_name = voilin_vir_ec,
plot_dir = violin_dir
)
vir_ec_clus_violin
# get differential represented genes
vir_ec_diff_repres <- get_diff_repres_ec(data = vir_ec_t_mat)
# generate heatmap of most differential represented genes
create_metabolic_heatmap(
data = vir_ec_t_mat,
signif_res = vir_ec_diff_repres,
subset = subset_top,
file_name = heat_vir_ec,
plot_dir = heat_dir
)
# show ec proportions
vir_ec_median <- get_cat_medians(
data = vir_ec_t_mat[, rownames(vir_ec_diff_repres)[1:subset_top]]
)
# print stats testing of ec classes
get_diff_repres_class(data = vir_ec_median)
# plot jitter plot
vir_ec_jitter <- create_jitter(
data = vir_ec_median,
classes_to_use = c(1:7),
file_name = jitter_vir_classes,
plot_dir = jitter_dir
)
# read in lifestyle counts
lifestyle_counts <- read.csv(
file = lifestyle_counts_data,
header = TRUE,
row.names = 1
)
# bootstrap median ratio of temperate-to-lytic viruses
lifestyle_boot_res <- get_median_ratios(
data = lifestyle_counts,
num_iter = max_iter,
numer = 1,
denom = 2
)
# plot violin plot of lifestyles by category
lifestyle_voilin <- create_cat_voilins(
data = lifestyle_boot_res,
file_name = voilin_lifestyle,
plot_dir = violin_dir)
lifestyle_voilin
# print stats testing of lifestyles preferences between categories
lifestyle <- melt(lifestyle_boot_res)
kruskal.test(lifestyle$value, lifestyle$Var2)
# read in cazy counts data
cazy_counts <- read.csv(
file = cazy_prop_data,
header = TRUE,
row.names = 1
)
# normalize
cazy_norm <- normalize_data(cazy_counts)
cazy_t_mat <- scale(t(cazy_norm))
# test for differentially represented cazy cat
cazy_diff_repres <- get_diff_repres_ec(data = cazy_t_mat)
# generate heatmap of most differential represented genes
create_cazy_heatmap(
data = cazy_t_mat,
signif_res = cazy_diff_repres,
subset = subset_top,
file_name = heat_cazy,
plot_dir = heat_dir
)
# read in cazy counts data
cazy_contig_hits <- read.csv(
file = cazy_contig_hits_data,
header = TRUE,
row.names = 1)
# bootstrap median ratio of cazy coverage-to-total contig lengths
cazy_aln_boot_res <- get_median_ratios(
data = cazy_contig_hits,
num_iter = max_iter,
numer = 2,
denom = 1)
# plot violin plot of coverage by category
cazy_aln_voilin <- create_cat_voilins(
data = cazy_aln_boot_res,
file_name = voilin_cazy_aln,
plot_dir = violin_dir)
cazy_aln_voilin
# print stats testing of coverage between categories
cazy_aln <- melt(cazy_aln_boot_res)
kruskal.test(cazy_aln$value, cazy_aln$Var2)
# read vf reference
vf_to_vfc <- read.csv(
file = vf_reference,
header = TRUE)
# format vf reference
vf_reference <- format_vf_reference(vf_reference = vf_to_vfc)
# read in vf counts data
vf_counts <- read.csv(
file = vf_prop_data,
header = TRUE,
row.names = 1
)
# normalize
vf_norm <- normalize_data(vf_counts)
vf_t_mat <- scale(t(vf_norm))
# get differential represented genes
vf_diff_repres <- get_diff_repres_ec(data = vf_t_mat)
# generate heatmap of most differential represented genes
create_vf_heatmap(
data = vf_t_mat,
signif_res = vf_diff_repres,
subset = subset_top,
vf_reference = vf_reference,
file_name = heat_vf,
plot_dir = heat_dir
)
# read in vf counts data
vf_contig_hits <- read.csv(
file = vf_contig_hits_data,
header = TRUE,
row.names = 1)
# bootstrap median ratio of vf coverage to total contig lengths
vf_aln_boot_res <- get_median_ratios(
data = vf_contig_hits,
num_iter = max_iter,
numer = 2,
denom = 1
)
# plot violin plot of coverage by category
vf_aln_voilin <- create_cat_voilins(
data = vf_aln_boot_res,
file_name = voilin_vf_aln,
plot_dir = violin_dir)
vf_aln_voilin
# print stats testing of coverage between categories
vf_aln <- melt(vf_aln_boot_res)
kruskal.test(vf_aln$value, vf_aln$Var2)
dir = "~/Documents/Research/project_coprolite_viromes/analysis/"
knitr::opts_chunk$set(root.dir = dir)
base_dir <- "~/Documents/Research/project_coprolite_viromes/analysis/"
# function to source R files from a specified directory
source_files_from_dir <- function(directory) {
full_path <- file.path(base_dir, directory)
functions_list <- list.files(
path = full_path,
pattern = "*.R",
full.names = TRUE
)
sapply(functions_list, source)
}
# source functions from different directories
source_files_from_dir("stats")
source_files_from_dir("graphing")
source_files_from_dir("misc")
set.seed(seed = 123)
k <- 4
max_iter <- 1000
subset_top <- 100
star_bounds <- list(list(0.1, 0.9), list(0.025, 0.975), list(0.01, 0.99),
list(0.001, 0.999))
data <- "~/Documents/Research/project_coprolite_viromes_NOT_CODE/data"
vir_phage_ec_prop_data <- paste0(data, "/vir_phage_ec_counts.csv")
phage_ec_prop_data <- paste0(data, "/phage_ec_counts.csv")
vir_on_phage_ec_prop_data <- paste0(data, "/vir_on_phage_ec_counts.csv")
bac_on_phage_ec_prop_data <- paste0(data, "/bac_on_phage_ec_counts.csv")
lifestyle_counts_data <- paste0(data, "/lifestyle_counts.csv")
cazy_prop_data <- paste0(data, "/cazy_alignment_counts.csv")
cazy_contig_hits_data <- paste0(data, "/cazy_alignment_contig_hits.csv")
vf_prop_data <- paste0(data, "/vf_alignment_counts.csv")
vf_contig_hits_data <- paste0(data, "/vf_alignment_contig_hits.csv")
vf_reference <- paste0(data, "/VFs.csv")
figures <- "~/Documents/Research/project_coprolite_viromes_NOT_CODE/figures"
violin_dir <- paste0(figures, "/violin")
heat_dir <- paste0(figures, "/heat")
jitter_dir <- paste0(figures, "/jitter")
voilin_vir_ec <- paste0("clustering_vir_ec_", k)
voilin_lifestyle <- "lifestyle"
voilin_vf_aln <- "vf_aln"
voilin_cazy_aln <- "cazy_aln"
voilin_phage_ec <- paste0("clustering_phage_ec_", k)
voilin_phage_fam <- paste0("clustering_phage_fam_", k)
voilin_phage_host <- paste0("clustering_phage_host_", k)
heat_vir_ec <- paste0("diff_repres_vir_ec_", subset_top)
heat_vir_ec_no_key <- paste0("diff_repres_vir_ec_no_key", subset_top)
heat_phage_ec <- paste0("diff_repres_phage_ec_", subset_top)
heat_phage_fam <- paste0("diff_repres_phage_fam_", subset_top)
heat_phage_host <- paste0("diff_repres_phage_host_", subset_top)
heat_cazy <- "diff_repress_cazy_profiles"
heat_vf <- "diff_repress_vf_profiles"
jitter_vir_classes <- paste0("vir_classes_", subset_top)
jitter_phage_classes <- paste0("phage_classes_", subset_top)
# read in raw counts data
vir_ec_counts <- read.csv(
file = vir_phage_ec_prop_data,
header = TRUE,
row.names = 1
)
# normalize observations within a sample and transform to log( CPM + 1 )
vir_ec_norm <- normalize_data(df = vir_ec_counts)
vir_ec_t_mat <- scale(t(vir_ec_norm))
# find optimal number of clusters with a wss plot
vir_ec_optimal_wss <- get_optimal_clusters(
data = vir_ec_t_mat,
method = "wss"
)
View(vir_ec_norm)
vir_ec_optimal_wss
# vir_ec_t_mat <- scale(t(vir_ec_norm))
vir_ec_t_mat <- t(vir_ec_norm)
# perform kmeans with bootstrap resampling
vir_ec_boot_res <- kmeans_bootstrap(
data = vir_ec_t_mat,
k = k,
num_iter = max_iter
)
# perform kmeans with permutations
vir_ec_perm_res <- kmeans_permute(
data = vir_ec_t_mat,
k = k,
num_iter = max_iter
)
# combining bootstrap and permutation results
vir_ec_clus_res <- get_clustering_res(
boot_data = vir_ec_boot_res,
perm_data = vir_ec_perm_res,
star_bounds = star_bounds,
num_iter = max_iter
)
# plot clustering results
vir_ec_clus_violin <- create_clus_violin(
boot_data = vir_ec_boot_res,
clus_res = vir_ec_clus_res,
file_name = voilin_vir_ec,
plot_dir = violin_dir
)
vir_ec_clus_violin
# get differential represented genes
vir_ec_diff_repres <- get_diff_repres_ec(data = vir_ec_t_mat)
# generate heatmap of most differential represented genes
create_metabolic_heatmap(
data = vir_ec_t_mat,
signif_res = vir_ec_diff_repres,
subset = subset_top,
file_name = heat_vir_ec,
plot_dir = heat_dir
)
setwd('Documents/Research/project_coprolite_viromes/analysis/stats/')
