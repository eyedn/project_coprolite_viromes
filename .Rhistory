bootstrap_dir <- "../../figures/clustering"
debugSource("~/Documents/Research/scripts/analysis/clustering_analysis.R", echo=TRUE)
debugSource("~/Documents/Research/scripts/analysis/clustering_analysis.R", echo=TRUE)
debugSource("~/Documents/Research/scripts/analysis/clustering/bootstrap_kmeans.R", echo=TRUE)
clustering_info <- bootstrap_kmeans(cpm, cpm_scaled, k, num_iter, graph_every,
bootstrap_dir)
View(data)
View(data_for_graph)
View(data_scaled)
View(ind_subset)
source("~/Documents/Research/scripts/analysis/clustering/bootstrap_kmeans.R", echo=TRUE)
clustering_info <- bootstrap_kmeans(cpm, cpm_scaled, k, num_iter, graph_every,
bootstrap_dir)
source("~/Documents/Research/scripts/analysis/clustering/bootstrap_kmeans.R", echo=TRUE)
bootstrap_dir <- "../../figures/clustering"
clustering_info <- bootstrap_kmeans(cpm, cpm_scaled, k, num_iter, graph_every,
bootstrap_dir)
source("~/Documents/Research/scripts/analysis/clustering/bootstrap_kmeans.R", echo=TRUE)
debugSource("~/Documents/Research/scripts/analysis/clustering/bootstrap_kmeans.R", echo=TRUE)
clustering_info <- bootstrap_kmeans(cpm, cpm_scaled, k, num_iter, graph_every,
bootstrap_dir)
View(ind_subset)
debugSource("~/Documents/Research/scripts/analysis/clustering/bootstrap_kmeans.R", echo=TRUE)
clustering_info <- bootstrap_kmeans(cpm, cpm_scaled, k, num_iter, graph_every,
bootstrap_dir)
clustering_info <- bootstrap_kmeans(cpm, cpm_scaled, k, num_iter, graph_every,
bootstrap_dir)
debugSource("~/Documents/Research/scripts/analysis/clustering/bootstrap_kmeans.R", echo=TRUE)
clustering_info <- bootstrap_kmeans(cpm, cpm_scaled, k, num_iter, graph_every,
bootstrap_dir)
View(ind_subset)
View(pal_resample)
View(data_scaled_resample)
View(resample_colors)
View(data_scaled_resample)
View(resample_colors)
View(probs)
###############################################################################
#   Aydin Karatas
#   Project Coprolite Viromes
#   clustering_analysis.R
###############################################################################
setwd("~/Documents/Research/scripts/analysis/clustering/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/clustering")
clustering_functions <- list.files(pattern="*.R")
sapply(clustering_functions, source)
setwd("~/Documents/Research/scripts/analysis/graphing/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/graphing")
graphing_functions <- list.files(pattern="*.R")
sapply(graphing_functions, source)
setwd("~/Documents/Research/scripts/")
setwd("~/Documents/Research/scripts/analysis/clustering/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/clustering")
clustering_functions <- list.files(pattern="*.R")
sapply(clustering_functions, source)
setwd("~/Documents/Research/scripts/analysis/graphing/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/graphing")
graphing_functions <- list.files(pattern="*.R")
sapply(graphing_functions, source)
setwd("~/Documents/Research/scripts/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes")
# create mds plot that displays all points distinguished by origin
create_origin_mds <- function(meta_data, mds, iter, plot_dir) {
mds$cluster <- meta_data[, 1]
mds$time <- meta_data[, 2]
mds$origin <- meta_data[, 3]
colnames(mds) <- c("MDS1", "MDS2", "cluster", "time", "origin")
# plot with ggplot2
orgin_plot <- ggplot(mds, aes(x = MDS1, y = MDS2,
color = factor(time),
shape = factor(time),
size = factor(time))) +
geom_point() +
ggtitle(paste0("iter. = ", iter)) +
xlab("MDS1") +
ylab("MDS2") +
scale_size_manual(guide = "none",
values = c(5, 8, 5)) +
scale_shape_manual(guide = "none",
values = safe_shapes[1:3]) +
scale_color_manual(guide = "none",
values = safe_colors[1:3]) +
theme_bw() +
theme(
plot.margin = margin(20, 20, 20, 20, "points"),
plot.title = element_text(size = 32,
face = "bold",
margin = margin(t = 0, r = 0, b = 20, l = 0)),
axis.title.x = element_text(size = 28,
face = "bold",
margin = margin(t = 20, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size = 28,
face = "bold",
margin = margin(t = 0, r = 20, b = 0, l = 0)),
axis.text = element_text(size = 28),
strip.text.x = element_text(size = 28),
)
print(orgin_plot)
# save image to svg file
ggsave(filename = paste0(plot_dir, "/category_plot_", iter, ".svg"),
plot = orgin_plot,
height = 8,
width = 8)
}
# create mds plot that displays all points distinguished by cluster
create_comb_clusters_mds <- function(meta_data, mds, k, iter, plot_dir) {
mds$cluster <- meta_data[, 1]
mds$time <- meta_data[, 2]
mds$origin <- meta_data[, 3]
colnames(mds) <- c("MDS1", "MDS2", "cluster", "time", "origin")
# plot with ggplot2
cluster_plot <- ggplot(mds, aes(x = MDS1, y = MDS2,
color = factor(cluster),
shape = factor(cluster))) +
geom_point(size = 5) +
ggtitle(paste0("k = ", k, ", iter. = ", iter)) +
xlab("MDS1") +
ylab("MDS2") +
scale_color_manual(guide = "none",
values = safe_colors[c(1:k)]) +
scale_shape_manual(guide = "none",
values = safe_shapes[c(1:k)]) +
theme_bw() +
theme(
plot.margin = margin(20, 20, 20, 20, "points"),
plot.title = element_text(size = 32,
face = "bold",
margin = margin(t = 0, r = 0, b = 20, l = 0)),
axis.title.x = element_text(size = 28,
face = "bold",
margin = margin(t = 20, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size = 28,
face = "bold",
margin = margin(t = 0, r = 20, b = 0, l = 0)),
axis.text = element_text(size = 28),
strip.text.x = element_text(size = 28),
)
print(cluster_plot)
# save image to svg file
ggsave(filename = paste0(plot_dir, "/cluster_plot_", iter, ".svg"),
plot = cluster_plot,
height = 8,
width = 8)
}
# create mds plot that creates separate panels for each category
create_facet_clusters_mds <- function(meta_data, mds, k, iter, plot_dir) {
mds$cluster <- meta_data[, 1]
mds$time <- meta_data[, 2]
mds$origin <- meta_data[, 3]
colnames(mds) <- c("MDS1", "MDS2", "cluster", "time", "origin")
# plot with ggplot2
time_plot_facet <- ggplot(mds, aes(x = MDS1, y = MDS2,
color = factor(cluster),
shape = factor(cluster))) +
geom_point(size = 5) +
ggtitle(paste0("k = ", k, ", iter. = ", iter)) +
xlab("MDS1") +
ylab("MDS2") +
scale_color_manual(guide = "none",
values = safe_colors[c(1:k)]) +
scale_shape_manual(guide = "none",
values = safe_shapes[c(1:k)]) +
theme_bw() +
facet_wrap(~time, labeller = as_labeller(pair_labels)) +
theme(
plot.margin = margin(20, 20, 20, 20, "points"),
plot.title = element_text(size = 32,
face = "bold",
margin = margin(t = 0, r = 0, b = 20, l = 0)),
axis.title.x = element_text(size = 28,
face = "bold",
margin = margin(t = 20, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size = 28,
face = "bold",
margin = margin(t = 0, r = 20, b = 0, l = 0)),
axis.text = element_text(size = 28),
strip.text.x = element_text(size = 28),
)
print(time_plot_facet)
# save image to svg file
ggsave(filename = paste0(plot_dir, "/time_plot_facet_", iter, ".svg"),
plot = time_plot_facet,
height = 8,
width = 15)
}
# run kmeans many times on subsets of the data to find concensus clustering
permute_kmeans <- function(data_unscaled, data_scaled, k, num_iter,
graph_every, plot_dir) {
clustering_probs <- matrix(nrow = num_iter, ncol = 6)
# perform boot strapping by re-sampling for each category
ind_subset <- data_scaled[grep("ind", rownames(data_scaled)), ]
pal_subset <- data_scaled[grep("pal", rownames(data_scaled)), ]
pre_subset <- data_scaled[grep("pre", rownames(data_scaled)), ]
# perform kmeans for num_iter iterations of bootstrapping
for (i in seq_len(num_iter)) {
# get indexes for re-sampling
ind_resample_idx <- sample(nrow(ind_subset), nrow(ind_subset),
replace = TRUE)
pal_resample_idx <- sample(nrow(pal_subset), nrow(pal_subset),
replace = TRUE)
pre_resample_idx <- sample(nrow(pre_subset), nrow(pre_subset),
replace = TRUE)
# create re-sampled subsets
ind_resample <- ind_subset[ind_resample_idx, ]
pal_resample <- pal_subset[pal_resample_idx, ]
pre_resample <- pre_subset[pre_resample_idx, ]
# combine subsets into combines re-sample
data_scaled_resample <- rbind(ind_resample, pal_resample, pre_resample)
# run kmeans
kmeans_result <- kmeans(data_scaled_resample, centers = k)
cluster_assignments <- kmeans_result$cluster
# calculate category, pair-wise clustering probabilities
clustering_probs[i, ] <- get_pair_wise_clustering_probs(
cluster_assignments, data_scaled_resample, k)
# display graph every <graph_every> iterations
if (i %% graph_every == 0 || i == 1) {
# prepare data for ploting
data_for_graph_resample <- t(data_unscaled)[resample_idx, ]
colors <- get_colors(data_unscaled)
mds <- as.data.frame(cmdscale(dist(data_for_graph_resample)))
meta_cluster_data <- cbind(cluster_assignments, colors[[1]],
colors[[2]], data_scaled_resample)
# generate plots
create_origin_mds(meta_cluster_data, mds, i, plot_dir)
create_comb_clusters_mds(meta_cluster_data, mds, k, i, plot_dir)
create_facet_clusters_mds(meta_cluster_data, mds, k, i, plot_dir)
}
print(paste0(Sys.time(), " | iterations complete:", i))
}
return(clustering_probs)
}
###############################################################################
#   Aydin Karatas
#   Project Coprolite Viromes
#   clustering_analysis.R
###############################################################################
setwd("~/Documents/Research/scripts/analysis/clustering/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/clustering")
clustering_functions <- list.files(pattern="*.R")
sapply(clustering_functions, source)
setwd("~/Documents/Research/scripts/analysis/graphing/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/graphing")
graphing_functions <- list.files(pattern="*.R")
sapply(graphing_functions, source)
setwd("~/Documents/Research/scripts/")
###############################################################################
#   Aydin Karatas
#   Project Coprolite Viromes
#   clustering_analysis.R
###############################################################################
setwd("~/Documents/Research/scripts/analysis/clustering/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/clustering")
clustering_functions <- list.files(pattern="*.R")
sapply(clustering_functions, source)
setwd("~/Documents/Research/scripts/analysis/graphing/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/graphing")
graphing_functions <- list.files(pattern="*.R")
sapply(graphing_functions, source)
setwd("~/Documents/Research/scripts/")
# read in raw counts data
# args <- commandArgs(trailingOnly = TRUE)
# raw_counts_csv <- args[1]
# raw_counts <- read.csv(args[1], header = TRUE, row.names = 1)
raw_counts <- read.csv("~/Documents/Research/data/Bacteria_ec_data.csv",
header = TRUE, row.names = 1)
View(raw_counts)
# normalize observations within a sample and transform to log( CPM + 1 )
cpm <- normalize_data(raw_counts)
View(raw_counts)
View(cpm)
rm(cpm)
# normalize observations within a sample and transform to log( CPM + 1 )
norm_counts <- normalize_data(raw_counts)
scaled_counts <- as.matrix(scale(t(normalize(raw_counts))))
scaled_counts <- as.matrix(scale(t(normalize_data(raw_counts))))
# find optimal number of clusters with a wss/silhouette plot
optimal_clusters <- get_optimal_clusters(scaled_counts, "silhouette")
optimal_clusters
# perform bootstrap clustering with kmeans
k <- 3
boot_iter <- 10
graph_every <- 5
bootstrap_dir <- "../../figures/bootstrap"
bootstrap_res <- bootstrap_kmeans(norm_counts, scaled_counts, k, boot_iter,
graph_every)
setwd("~/Documents/Research/scripts/analysis/clustering/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/clustering")
clustering_functions <- list.files(pattern="*.R")
sapply(clustering_functions, source)
setwd("~/Documents/Research/scripts/analysis/graphing/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/graphing")
graphing_functions <- list.files(pattern="*.R")
sapply(graphing_functions, source)
setwd("~/Documents/Research/scripts/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes")
bootstrap_res <- bootstrap_kmeans(norm_counts, scaled_counts, k, boot_iter,
graph_every)
###############################################################################
setwd("~/Documents/Research/scripts/analysis/clustering/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/clustering")
clustering_functions <- list.files(pattern="*.R")
sapply(clustering_functions, source)
setwd("~/Documents/Research/scripts/analysis/graphing/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/graphing")
graphing_functions <- list.files(pattern="*.R")
sapply(graphing_functions, source)
setwd("~/Documents/Research/scripts/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes")
bootstrap_res <- bootstrap_kmeans(norm_counts, scaled_counts, k, boot_iter,
graph_every)
View(norm_counts)
View(norm_counts)
View(scaled_counts)
###############################################################################
setwd("~/Documents/Research/scripts/analysis/clustering/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/clustering")
clustering_functions <- list.files(pattern="*.R")
sapply(clustering_functions, source)
setwd("~/Documents/Research/scripts/analysis/graphing/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/graphing")
graphing_functions <- list.files(pattern="*.R")
sapply(graphing_functions, source)
setwd("~/Documents/Research/scripts/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes")
bootstrap_res <- bootstrap_kmeans(norm_counts, scaled_counts, k, boot_iter,
graph_every)
###############################################################################
setwd("~/Documents/Research/scripts/analysis/clustering/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/clustering")
clustering_functions <- list.files(pattern="*.R")
sapply(clustering_functions, source)
setwd("~/Documents/Research/scripts/analysis/graphing/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/graphing")
graphing_functions <- list.files(pattern="*.R")
sapply(graphing_functions, source)
setwd("~/Documents/Research/scripts/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes")
setwd("~/Documents/Research/scripts/analysis/clustering/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/clustering")
clustering_functions <- list.files(pattern="*.R")
sapply(clustering_functions, source)
setwd("~/Documents/Research/scripts/analysis/graphing/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/graphing")
graphing_functions <- list.files(pattern="*.R")
sapply(graphing_functions, source)
setwd("~/Documents/Research/scripts/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes")
bootstrap_res <- kmeans_bootstrap(norm_counts, scaled_counts, k, boot_iter,
graph_every)
setwd("~/Documents/Research/scripts/analysis/clustering/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/clustering")
clustering_functions <- list.files(pattern="*.R")
sapply(clustering_functions, source)
setwd("~/Documents/Research/scripts/analysis/graphing/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/graphing")
graphing_functions <- list.files(pattern="*.R")
sapply(graphing_functions, source)
setwd("~/Documents/Research/scripts/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes")
bootstrap_res <- kmeans_bootstrap(norm_counts, scaled_counts, k, boot_iter,
graph_every)
bootstrap_cluster_probs <- bootstrap_res[[1]]
bootstrap_mds_info <- bootstrap_res[[2]]
create_all_mds(bootstrap_mds_info, bootstrap_dir)
###############################################################################
setwd("~/Documents/Research/scripts/analysis/clustering/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/clustering")
clustering_functions <- list.files(pattern="*.R")
sapply(clustering_functions, source)
setwd("~/Documents/Research/scripts/analysis/graphing/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/graphing")
graphing_functions <- list.files(pattern="*.R")
sapply(graphing_functions, source)
setwd("~/Documents/Research/scripts/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes")
create_all_mds(bootstrap_mds_info, bootstrap_dir)
View(bootstrap_mds_info)
setwd("~/Documents/Research/scripts/analysis/clustering/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/clustering")
clustering_functions <- list.files(pattern="*.R")
sapply(clustering_functions, source)
setwd("~/Documents/Research/scripts/analysis/graphing/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/graphing")
graphing_functions <- list.files(pattern="*.R")
sapply(graphing_functions, source)
setwd("~/Documents/Research/scripts/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes")
bootstrap_res <- kmeans_bootstrap(norm_counts, scaled_counts, k, boot_iter,
graph_every)
bootstrap_cluster_probs <- bootstrap_res[[1]]
bootstrap_mds_info <- bootstrap_res[[2]]
create_all_mds(bootstrap_mds_info, bootstrap_dir)
View(bootstrap_mds_info)
debugSource("~/Documents/Research/scripts/analysis/clustering/kmeans_permute.R", echo=TRUE)
debugSource("~/Documents/Research/scripts/analysis/clustering/kmeans_bootstrap.R", echo=TRUE)
bootstrap_res <- kmeans_bootstrap(norm_counts, scaled_counts, k, boot_iter,
graph_every)
force(data_unscaled)
View(data_unscaled)
View(ind_unscaled)
View(ind_unscaled)
View(data_for_graph_resample)
View(clustering_probs)
source("~/Documents/Research/scripts/analysis/clustering/kmeans_bootstrap.R", echo=TRUE)
debugSource("~/Documents/Research/scripts/analysis/clustering/kmeans_bootstrap.R", echo=TRUE)
bootstrap_res <- kmeans_bootstrap(norm_counts, scaled_counts, k, boot_iter,
graph_every)
View(colors)
debugSource("~/Documents/Research/scripts/analysis/clustering/kmeans_bootstrap.R", echo=TRUE)
bootstrap_res <- kmeans_bootstrap(norm_counts, scaled_counts, k, boot_iter,
graph_every)
View(colors)
View(data_for_graph_resample)
View(data_scaled_resample)
View(mds)
View(colors)
View(data_scaled_resample)
nrow(data_scaled_resample)
View(meta_cluster_data)
View(curr_iter_info)
View(mds)
View(mds_info)
debugSource("~/Documents/Research/scripts/analysis/clustering/kmeans_bootstrap.R", echo=TRUE)
bootstrap_res <- kmeans_bootstrap(norm_counts, scaled_counts, k, boot_iter,
graph_every)
View(mds_info)
debugSource("~/Documents/Research/scripts/analysis/graphing/create_all_mds.R", echo=TRUE)
bootstrap_res <- kmeans_bootstrap(norm_counts, scaled_counts, k, boot_iter,
graph_every)
bootstrap_cluster_probs <- bootstrap_res[[1]]
bootstrap_mds_info <- bootstrap_res[[2]]
create_all_mds(bootstrap_mds_info, bootstrap_dir)
View(all_info)
View(meta_data)
create_all_mds(bootstrap_mds_info, bootstrap_dir)
###############################################################################
setwd("~/Documents/Research/scripts/analysis/clustering/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/clustering")
clustering_functions <- list.files(pattern="*.R")
sapply(clustering_functions, source)
setwd("~/Documents/Research/scripts/analysis/graphing/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/graphing")
graphing_functions <- list.files(pattern="*.R")
sapply(graphing_functions, source)
setwd("~/Documents/Research/scripts/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes")
create_all_mds(bootstrap_mds_info, bootstrap_dir)
create_all_mds(bootstrap_mds_info, bootstrap_dir)
create_all_mds(bootstrap_mds_info, bootstrap_dir)
source("~/Documents/Research/scripts/analysis/graphing/create_all_mds.R", echo=TRUE)
create_all_mds(bootstrap_mds_info, bootstrap_dir)
create_all_mds(bootstrap_mds_info, bootstrap_dir)
View(aliases)
create_all_mds(bootstrap_mds_info, bootstrap_dir)
source("~/Documents/Research/scripts/analysis/graphing/create_origin_mds.R", echo=TRUE)
source("~/Documents/Research/scripts/analysis/graphing/create_origin_mds.R", echo=TRUE)
bootstrap_cluster_probs <- bootstrap_res[[1]]
bootstrap_mds_info <- bootstrap_res[[2]]
create_all_mds(bootstrap_mds_info, bootstrap_dir)
Q
clear
#   clustering_analysis.R
###############################################################################
setwd("~/Documents/Research/scripts/analysis/clustering/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/clustering")
clustering_functions <- list.files(pattern="*.R")
sapply(clustering_functions, source)
setwd("~/Documents/Research/scripts/analysis/graphing/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes/analysis/graphing")
graphing_functions <- list.files(pattern="*.R")
sapply(graphing_functions, source)
setwd("~/Documents/Research/scripts/")
# setwd("/u/home/a/ayd1n/project_coprolite_viromes")
# read in raw counts data
# args <- commandArgs(trailingOnly = TRUE)
# raw_counts_csv <- args[1]
# raw_counts <- read.csv(args[1], header = TRUE, row.names = 1)
raw_counts <- read.csv("~/Documents/Research/data/Bacteria_ec_data.csv",
header = TRUE, row.names = 1)
# normalize observations within a sample and transform to log( CPM + 1 )
norm_counts <- normalize_data(raw_counts)
scaled_counts <- as.matrix(scale(t(normalize_data(raw_counts))))
# find optimal number of clusters with a wss/silhouette plot
optimal_clusters <- get_optimal_clusters(scaled_counts, "silhouette")
# perform bootstrap clustering with kmeans
k <- 3
boot_iter <- 10
graph_every <- 5
bootstrap_dir <- "../../figures/bootstrap"
bootstrap_res <- kmeans_bootstrap(norm_counts, scaled_counts, k, boot_iter,
graph_every)
bootstrap_cluster_probs <- bootstrap_res[[1]]
bootstrap_mds_info <- bootstrap_res[[2]]
create_all_mds(bootstrap_mds_info, bootstrap_dir)
undebug()
undebug(ls)
undebug(create_all_mds)
undebug(create_origin_mds)
clear
create_all_mds(bootstrap_mds_info, bootstrap_dir)
undebug(svglite_)
View(aliases)
View(aliases)
View(aliases)
View(aliases)
bootstrap_res <- kmeans_bootstrap(norm_counts, scaled_counts, k, boot_iter,
graph_every)
bootstrap_cluster_probs <- bootstrap_res[[1]]
bootstrap_mds_info <- bootstrap_res[[2]]
create_all_mds(bootstrap_mds_info, bootstrap_dir)
c
create_all_mds(bootstrap_mds_info, bootstrap_dir)
